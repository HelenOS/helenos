#
# Copyright (c) 2006 Martin Decky
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# - The name of the author may not be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

.PHONY: all build_dist clean

include Makefile.common

GRUB = grub/$(BARCH)-$(GRUB_ARCH)
BOOT = $(DISTROOT)/boot
BOOT_CONFIG = $(BOOT)/grub/grub.cfg

ELTORITO = boot/grub/$(GRUB_ARCH).img
IMAGE = $(DISTROOT)/$(ELTORITO)

ifeq ($(GRUB_ARCH),pc)
	MULTIBOOT_CMD = multiboot
	MODULE_CMD = module
endif
ifeq ($(GRUB_ARCH),efi)
	MULTIBOOT_CMD = multiboot2
	MODULE_CMD = module2
endif

all: $(POST_OUTPUT)

$(POST_OUTPUT): build_dist
ifeq ($(GRUB_ARCH),pc)
	$(GENISOIMAGE) -J -r -input-charset utf-8 -V "HelenOS-CD" -eltorito-boot $(ELTORITO) -no-emul-boot -boot-load-size 64 -boot-info-table -o $@ $(DISTROOT)/
endif
ifeq ($(GRUB_ARCH),efi)
	$(GENISOIMAGE) -J -r -input-charset utf-8 -V "HelenOS-CD" --efi-boot $(ELTORITO) -o $@ $(DISTROOT)/
endif

build_dist: clean $(COMPONENTS)
	mkdir -p $(BOOT)
	cp -r -L $(GRUB) $(BOOT)/grub
ifeq ($(GRUB_ARCH),efi)
	gunzip $(IMAGE)
endif

ifeq ($(GRUB_LOADER),multiboot)
	for module in $(COMPONENTS) ; do \
		cp "$$module" $(BOOT)/ ; \
	done
endif
ifeq ($(GRUB_LOADER),chainloader)
	cp "$(BOOT_OUTPUT)" $(BOOT)/
endif

	echo "set default=0" > $(BOOT_CONFIG)
	echo "set timeout=10" >> $(BOOT_CONFIG)
	echo "" >> $(BOOT_CONFIG)

ifeq ($(GRUB_ARCH),pc)
	echo "insmod vbe" >> $(BOOT_CONFIG)
	echo "insmod vga" >> $(BOOT_CONFIG)
endif
ifeq ($(GRUB_ARCH),efi)
	echo "insmod efi_gop" >> $(BOOT_CONFIG)
	echo "insmod efi_uga" >> $(BOOT_CONFIG)
endif
	echo "" >> $(BOOT_CONFIG)

	echo "menuentry 'HelenOS $(RELEASE)' --class helenos --class os {" >> $(BOOT_CONFIG)
ifeq ($(GRUB_LOADER),multiboot)
	for module in $(MODULES) ; do \
		echo "	echo 'Loading $$module'" >> $(BOOT_CONFIG) ; \
		if [ "$$module" = "kernel.elf" ] ; then \
			echo "	$(MULTIBOOT_CMD) /boot/$$module" >> $(BOOT_CONFIG) ; \
		else \
			echo "	$(MODULE_CMD) /boot/$$module /boot/$$module" >> $(BOOT_CONFIG) ; \
		fi \
	done
endif
ifeq ($(GRUB_LOADER),chainloader)
	echo "	echo 'Loading $(BOOT_OUTPUT)'" >> $(BOOT_CONFIG)
	echo "	chainloader /boot/$(BOOT_OUTPUT)" >> $(BOOT_CONFIG)
	echo "	boot" >> $(BOOT_CONFIG)
endif
	echo "}" >> $(BOOT_CONFIG)

clean:
	rm -fr $(DISTROOT)

include Makefile.initrd
