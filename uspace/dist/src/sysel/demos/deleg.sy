--
-- SPDX-FileCopyrightText: 2010 Jiri Svoboda
--
-- SPDX-License-Identifier: BSD-3-Clause
--

class DelegateDemo is
	fun Main(), static is
		var demo : DelegateClass;

		demo = new DelegateClass();
		demo.Run();
	end
end

class DelegateClass is
	fun Run() is
		var op : BinaryOp;

		-- The anonymous delegate to self.Add is implicitly
		-- converted to BinaryOp. This is allowed as long as
		-- the signature matches.
		op = Add;

		-- Pass delegate to Operate()
		Operate(op, "Add");

		-- Obviously the intermediate step through a variable
		-- is redundant.
		Operate(Subtract, "Subtract");
	end

	-- Function having delegate as the first parameger
	fun Operate(op : BinaryOp; opName : string) is
		Console.Write(opName + "(1, 2): ");
		Console.WriteLine(op(1, 2));
	end

	-- A function matching the delegate signature
	fun Add(a : int; b : int) : int is
		return a + b;
	end

	-- Another function matching the delegate signature
	fun Subtract(a : int; b : int) : int is
		return a - b;
	end

	-- Declaration of a delegate.
	deleg BinaryOp(a : int; b : int) : int;
end
