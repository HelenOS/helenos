--
-- SPDX-FileCopyrightText: 2010 Jiri Svoboda
--
-- SPDX-License-Identifier: BSD-3-Clause
--

-- Trivial map.
class Map/tkey/tvalue is
	var data : List/(MapPair/tkey/tvalue);

	-- New empty map.
	new() is
		data = new List/(MapPair/tkey/tvalue)();
	end

	fun Set(key : tkey; value : tvalue) is
		if KeyPresent(key) then
			Remove(key);
		end

		var p : MapPair/tkey/tvalue;
		p = new MapPair/tkey/tvalue();

		p.Key = key;
		p.Value = value;
		data.Append(p);
	end

	-- Return internal list node associated with key @a key.
	fun lookup_node(key : tkey) : ListNode/(MapPair/tkey/tvalue) is
		var node : ListNode/(MapPair/tkey/tvalue);

		node = data.First;
		while node != nil do
			if node.Data.Key == key then
				return node;
			end

			node = node.Next;
		end

		return nil;
	end

	fun KeyPresent(key : tkey) : bool is
		return lookup_node(key) != nil;
	end

	fun Get(key : tkey) : tvalue is
		var node : ListNode/(MapPair/tkey/tvalue);

		node = lookup_node(key);
		return node.Data.Value;
	end

	fun Remove(key : tkey) is
		var node : ListNode/(MapPair/tkey/tvalue);

		node = lookup_node(key);
		node.Remove();
	end

	prop self[key : tkey] : tvalue is
		get is
			return Get(key);
		end
		set value is
			Set(key, value);
		end
	end

	fun GetEnumerator() : IEnumerator/tkey is
		return new MapEnumerator/tkey/tvalue(data.get_first());
	end
end

class MapPair/tkey/tvalue is
	var Key : tkey;
	var Value : tvalue;
end

class MapEnumerator/tkey/tvalue : IEnumerator/tkey is
	var first : ListNode/(MapPair/tkey/tvalue);
	var current : ListNode/(MapPair/tkey/tvalue);
	var started : bool;

	new(first_node : ListNode/(MapPair/tkey/tvalue)) is
		first = first_node;
		current = nil;
		started = false;
	end

	fun MoveNext() : bool is
		if started then
			current = current.Next;
		else
			current = first;
			started = true;
		end

		return current != nil;
	end

	prop Data : tkey is
		get is
			return current.Data.Key;
		end
	end
end
