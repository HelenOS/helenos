/*
 * Copyright (c) 2018 Jaroslav Jindrak
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * - The name of the author may not be used to endorse or promote products
 *   derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef LIBCPP_CSTDLIB
#define LIBCPP_CSTDLIB


namespace std::hel
{
    extern "C" {
        #include <stdlib.h>
        #include <_bits/ssize_t.h>
    }
}

namespace std
{
    /* using std::hel::div_t; */
    /* using std::hel::ldiv_t; */
    /* using std::hel::lldiv_t; */
    using std::hel::size_t;

    using std::hel::abort;
    using std::hel::exit;
    /* using std::hel::quick_exit; */
    /* using std::hel::_Exit; */
    using std::hel::atexit;
    /* using std::hel::at_quick_exit; */
    /* using std::hel::system; */
    /* using std::hel::getenv; */

    using std::hel::malloc;
    using std::hel::calloc;
    using std::hel::realloc;
    using std::hel::free;

    /* using std::hel::atof; */
    /* using std::hel::atoi; */
    /* using std::hel::atol; */
    /* using std::hel::atoll; */
    /* using std::hel::strtol; */
    /* using std::hel::strtoll; */
    /* using std::hel::strtoul; */
    /* using std::hel::strtoull; */
    /* using std::hel::strtof; */
    /* using std::hel::strtod; */
    /* using std::hel::strtold; */

    /* using std::hel::mblen; */
    /* using std::hel::mbtowc; */
    /* using std::hel::wctomb; */
    /* using std::hel::mbstowcs; */
    /* using std::hel::wcstombs; */

    using std::hel::rand;
    using std::hel::srand;
    using std::hel::qsort;
    /* using std::hel::bsearch; */
    /* using std::hel::abs; */
    /* using std::hel::labs; */
    /* using std::hel::llabs; */
    /* using std::hel::div; */
    /* using std::hel::ldiv; */
    /* using std::hel::lldiv; */
}

/* using std::hel::div_t; */
/* using std::hel::ldiv_t; */
/* using std::hel::lldiv_t; */
using std::hel::size_t;

using std::hel::abort;
using std::hel::exit;
/* using std::hel::quick_exit; */
/* using std::hel::_Exit; */
using std::hel::atexit;
/* using std::hel::at_quick_exit; */
/* using std::hel::system; */
/* using std::hel::getenv; */

using std::hel::malloc;
using std::hel::calloc;
using std::hel::realloc;
using std::hel::free;

/* using std::hel::atof; */
/* using std::hel::atoi; */
/* using std::hel::atol; */
/* using std::hel::atoll; */
/* using std::hel::strtol; */
/* using std::hel::strtoll; */
/* using std::hel::strtoul; */
/* using std::hel::strtoull; */
/* using std::hel::strtof; */
/* using std::hel::strtod; */
/* using std::hel::strtold; */

/* using std::hel::mblen; */
/* using std::hel::mbtowc; */
/* using std::hel::wctomb; */
/* using std::hel::mbstowcs; */
/* using std::hel::wcstombs; */

using std::hel::rand;
using std::hel::srand;
using std::hel::qsort;
/* using std::hel::bsearch; */
/* using std::hel::abs; */
/* using std::hel::labs; */
/* using std::hel::llabs; */
/* using std::hel::div; */
/* using std::hel::ldiv; */
/* using std::hel::lldiv; */

#endif
